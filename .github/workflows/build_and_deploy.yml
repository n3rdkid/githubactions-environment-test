name: Build and Deploy (if push to develop / a new tag push)
on:
  push:
    branches:
      - test-*
      - develop
      - main
    tags:
      - v*
  pull_request:
    branches:
      - develop
      - test-*
      - main
jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.env }}
    steps:
    - id: get_env
      run: |
        if grep -q "refs/tags/v" <<< ${{github.ref}}; then
          echo "::set-output name=env::PROD"
        else
          echo "::set-output name=env::DEV"
        fi
    - id: print_env
      name: Print environment
      run: echo  "Environment :- ${{ steps.get_env.outputs.env }}"

  build_and_deploy:
    name: Build and deploy the repository
    runs-on: ubuntu-latest
    needs: setup_environment
    environment: ${{needs.setup_environment.outputs.env_name}}  
    steps:
      - uses: actions/checkout@v2
      
      - uses: dorny/paths-filter@v2
        id: package_filter
        with:
          filters: |
            consumer:
              - 'packages/consumer/**'
            owner:
              - 'packages/admin/**'
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Check dependencies in cache
        id: yarn-cache 
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Initializing dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run:  yarn bootstrap

      - name: Creating & Initializing env variables 
        run: |
          echo "env" > .env
      - name: Build the consumer package
        if: steps.package_filter.outputs.consumer == 'true' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        run: yarn build:gae:consumer

      - name: Setup Cloud SDK
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        run: echo "Setting up Cloud SDK"
        # uses: google-github-actions/setup-gcloud@v0.2.0
        # with:
        #   project_id: ${{ secrets.GCP_PROJECT_ID }}
        #   service_account_key: ${{ secrets.GCP_SERVICE_KEY }}
        

      - name: Deploy consumer package to Google App Engine
        if: ${{ (steps.package_filter.outputs.consumer == 'true'|| startsWith(github.ref, 'refs/tags/v')) && github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        # run: gcloud app deploy app_consumer.yaml --quiet --project ${{secrets.GCP_PROJECT_ID}}
        run: echo "Deploy consumer package to App engine"
      
      - name: Slack Notification on SUCCESS
        if: success()
        run : echo "Build Success"
        # uses: tokorom/action-slack-incoming-webhook@main
        # env:
        #   INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        # with:
        #   text: A build and (*deploy) job has succeeded :tada:.
        #   attachments: |
        #     [
        #       {
        #         "color": "good",
        #         "author_name": "${{ github.actor }}",
        #         "author_icon": "${{ github.event.sender.avatar_url }}",
        #         "fields": [
        #           {
        #             "title": "Commit Message",
        #             "value": "${{ github.event.head_commit.message }}"
        #           },
        #           {
        #             "title": "GitHub Actions URL",
        #             "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
        #           },
        #           {
        #             "title": "Compare URL",
        #             "value": "${{ github.event.compare }}"
        #           }
        #         ]
        #       }
        #     ]
      - name: Slack Notification on FAILURE
        if: failure()
        run : echo "Build and Deploy Failed"
        # uses: tokorom/action-slack-incoming-webhook@main
        # env:
        #   INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        # with:
        #   text: A build and (*deploy) has failed :crying_cat_face:.
        #   attachments: |
        #     [
        #       {
        #         "color": "danger",
        #         "author_name": "${{ github.actor }}",
        #         "author_icon": "${{ github.event.sender.avatar_url }}",
        #         "fields": [
        #           {
        #             "title": "Commit Message",
        #             "value": "${{ github.event.head_commit.message }}"
        #           },
        #           {
        #             "title": "GitHub Actions URL",
        #             "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
        #           },
        #           {
        #             "title": "Compare URL",
        #             "value": "${{ github.event.compare }}"
        #           }
        #         ]
        #       }
        #     ]
